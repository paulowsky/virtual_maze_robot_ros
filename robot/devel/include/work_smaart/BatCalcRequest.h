// Generated by gencpp from file work_smaart/BatCalcRequest.msg
// DO NOT EDIT!


#ifndef WORK_SMAART_MESSAGE_BATCALCREQUEST_H
#define WORK_SMAART_MESSAGE_BATCALCREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace work_smaart
{
template <class ContainerAllocator>
struct BatCalcRequest_
{
  typedef BatCalcRequest_<ContainerAllocator> Type;

  BatCalcRequest_()
    : dist(0)
    , numeroMovements(0)  {
    }
  BatCalcRequest_(const ContainerAllocator& _alloc)
    : dist(0)
    , numeroMovements(0)  {
  (void)_alloc;
    }



   typedef int64_t _dist_type;
  _dist_type dist;

   typedef int64_t _numeroMovements_type;
  _numeroMovements_type numeroMovements;





  typedef boost::shared_ptr< ::work_smaart::BatCalcRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::work_smaart::BatCalcRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BatCalcRequest_

typedef ::work_smaart::BatCalcRequest_<std::allocator<void> > BatCalcRequest;

typedef boost::shared_ptr< ::work_smaart::BatCalcRequest > BatCalcRequestPtr;
typedef boost::shared_ptr< ::work_smaart::BatCalcRequest const> BatCalcRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::work_smaart::BatCalcRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::work_smaart::BatCalcRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::work_smaart::BatCalcRequest_<ContainerAllocator1> & lhs, const ::work_smaart::BatCalcRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dist == rhs.dist &&
    lhs.numeroMovements == rhs.numeroMovements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::work_smaart::BatCalcRequest_<ContainerAllocator1> & lhs, const ::work_smaart::BatCalcRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace work_smaart

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::work_smaart::BatCalcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work_smaart::BatCalcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_smaart::BatCalcRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c157b98caee8dfc6a742f5eed59fbc1";
  }

  static const char* value(const ::work_smaart::BatCalcRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c157b98caee8dfcULL;
  static const uint64_t static_value2 = 0x6a742f5eed59fbc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "work_smaart/BatCalcRequest";
  }

  static const char* value(const ::work_smaart::BatCalcRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 dist\n"
"int64 numeroMovements\n"
;
  }

  static const char* value(const ::work_smaart::BatCalcRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist);
      stream.next(m.numeroMovements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatCalcRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::work_smaart::BatCalcRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::work_smaart::BatCalcRequest_<ContainerAllocator>& v)
  {
    s << indent << "dist: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dist);
    s << indent << "numeroMovements: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numeroMovements);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORK_SMAART_MESSAGE_BATCALCREQUEST_H
