// Generated by gencpp from file work_smaart/isGoalRequest.msg
// DO NOT EDIT!


#ifndef WORK_SMAART_MESSAGE_ISGOALREQUEST_H
#define WORK_SMAART_MESSAGE_ISGOALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace work_smaart
{
template <class ContainerAllocator>
struct isGoalRequest_
{
  typedef isGoalRequest_<ContainerAllocator> Type;

  isGoalRequest_()
    : pos()  {
    }
  isGoalRequest_(const ContainerAllocator& _alloc)
    : pos(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::work_smaart::isGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::work_smaart::isGoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct isGoalRequest_

typedef ::work_smaart::isGoalRequest_<std::allocator<void> > isGoalRequest;

typedef boost::shared_ptr< ::work_smaart::isGoalRequest > isGoalRequestPtr;
typedef boost::shared_ptr< ::work_smaart::isGoalRequest const> isGoalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::work_smaart::isGoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::work_smaart::isGoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::work_smaart::isGoalRequest_<ContainerAllocator1> & lhs, const ::work_smaart::isGoalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::work_smaart::isGoalRequest_<ContainerAllocator1> & lhs, const ::work_smaart::isGoalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace work_smaart

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::work_smaart::isGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::work_smaart::isGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work_smaart::isGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work_smaart::isGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_smaart::isGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_smaart::isGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::work_smaart::isGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c36b9dc6cd5c312342b9fb81b6e45812";
  }

  static const char* value(const ::work_smaart::isGoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc36b9dc6cd5c3123ULL;
  static const uint64_t static_value2 = 0x42b9fb81b6e45812ULL;
};

template<class ContainerAllocator>
struct DataType< ::work_smaart::isGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "work_smaart/isGoalRequest";
  }

  static const char* value(const ::work_smaart::isGoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::work_smaart::isGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32 pos\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::work_smaart::isGoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::work_smaart::isGoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct isGoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::work_smaart::isGoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::work_smaart::isGoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORK_SMAART_MESSAGE_ISGOALREQUEST_H
